# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build and Release

on:
  push:
    #branches: [ "disabled" ]
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
    #branches: [ "disabled" ]

jobs:
  build-and-release:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout code
      - uses: actions/checkout@v2

      # Step 2: Setup .NET (use the appropriate version for your project)
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
      
      - name: Setup .NET Core 3.1 
      uses: actions/setup-dotnet@v1 
      with: 
        dotnet-version: 3.1.x
      
      # Step 3: Install a compatible dotnet-script tool (version 1.0.0 is compatible with .NET 6.0) D:\a\KBTS3AudioBot\KBTS3AudioBot\TS3AudioBot ChannelChecker
      - name: Install dotnet-script tool (version 1.5.0)
        run: dotnet tool install --global dotnet-script --version 1.5.0

      - name: Build Project
        run: dotnet build --configuration Debug /p:ExcludePlugins=true /p:ExcludeProjects=AloneMode /p:ExcludeProjects=AutoChannel /p:ExcludeProjects=ChannelChecker /p:ExcludeProjects=Cryptoz /p:ExcludeProjects=ExternalAPI /p:ExcludeProjects=GameServer /p:ExcludeProjects=OnlineCounter /p:ExcludeProjects=RankingSystem /p:ExcludeProjects=Watchparty /p:ExcludeProjects=whatIsPlaying

      - name: Generate version
        run: |
          $version = $(dotnet script ./TS3AudioBot/build.csx TS3AudioBot/obj/Debug/net6.0/Version.g.cs Debug)
          echo "VERSION=$version" >> $env:GITHUB_ENV

      - name: Restore dependencies
        run: dotnet restore

      - name: Test
        run: dotnet test --no-build --verbosity normal

      # Step 5: Run tests
      #- name: Build
      #  run: dotnet build --no-restore
      #- name: Publish project targeting net6.0
      #  run: |
      #    dotnet publish TS3AudioBot/TS3AudioBot.csproj -c Release -f net6.0 -o ${{ github.workspace }}/output
      - name: Publish Windows Binary
        run: |
          dotnet publish -c Release -r win-x64 --self-contained false -p:PublishTrimmed=true /p:ExcludePlugins=true

      - name: Publish Linux Binary
        run: |
          dotnet publish -c Release -r linux-x64 --self-contained true -p:PublishTrimmed=true /p:ExcludePlugins=true

      - name: Install zip
        run: choco install zip

      - name: Zip output files
        run: |
          # Zip the bin and obj directories along with the publish output
          zip -r ${{ github.workspace }}/release_package.zip ${{ github.workspace }}/bin ${{ github.workspace }}/obj ${{ github.workspace }}/output

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: "Release ${{ env.VERSION }}"
          body: |
            This is the release notes for version ${{ env.VERSION }}
          draft: false
          prerelease: false

      # - name: Upload Release Assets
      #   uses: actions/upload-release-asset@v1
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ${{ github.workspace }}/release_package.zip
      #     asset_name: release_package.zip
      #     asset_content_type: application/zip
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.TOKEN }}
      - name: Upload Windows Binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/bin/Release/net6.0/win-x64/publish/release_package_windows.zip
          asset_name: release_package_windows.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}

      - name: Upload Linux Binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/bin/Release/net6.0/linux-x64/publish/release_package_linux.zip
          asset_name: release_package_linux.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}